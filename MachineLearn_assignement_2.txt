def answer_one():
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    
    
    result = np.zeros((4,100))
    #print(result.shape)
    #print(x[:,0].shape)
    degreelist = [1,3,6,9]
    
    for ind,deg in enumerate(degreelist):
        poly = PolynomialFeatures(degree = deg)
        X_train_poly = poly.fit_transform(X_train.reshape(11,1))
        linreg = LinearRegression().fit(X_train_poly,y_train)
        y = linreg.predict(poly.fit_transform(np.linspace(0,10,100).reshape(100,1)))
        result[ind, :] = y
        #x = np.array(list(np.linspace(0,10,100))).reshape(100,1)
        #print(linreg.predict(x[:,0]))
        #for indexval, element in enumerate(x[:,0]):
        #    result[ind,indexval] = linreg.predict(element)
        #print("Train Accuracy: ",linreg.score(X_train_poly,y_train))
        #print("Test Accuracy: ",linreg.score(X_test.reshape(4,1),y_test))
    
    return result.shape

answer_one()


def answer_two():
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.metrics.regression import r2_score
    
    r2_train_list = []
    r2_test_list = []
    
    for deg in range(0,10):
        poly = PolynomialFeatures(degree = deg)
        X_train_poly = poly.fit_transform(X_train.reshape(11,1))
        linreg = LinearRegression().fit(X_train_poly,y_train)
        r2_train_list.append(r2_score(y_train,linreg.predict(X_train_poly)))
        X_test_poly = poly.fit_transform(X_test.reshape(4,1))
        r2_test_list.append(r2_score(y_test,linreg.predict(X_test_poly)))
        r2_train = np.array(r2_train_list)
        r2_test = np.array(r2_test_list)
    return (r2_train, r2_test)

answer_two()


def answer_three():
    
    (r2_train, r2_test) = answer_two()
    import matplotlib.pyplot as plt
    
    plt.figure()
    plt.plot(range(10),r2_train)
    plt.plot(range(10),r2_test)
    
    
    return (0,9,6)

answer_three()


def answer_four():
    from sklearn.preprocessing import PolynomialFeatures
    from sklearn.linear_model import Lasso, LinearRegression
    from sklearn.metrics.regression import r2_score

    poly = PolynomialFeatures(degree = 12)
    
    X_train_poly = poly.fit_transform(X_train.reshape(11,1))
    linreg = LinearRegression().fit(X_train_poly,y_train)
    reglinreg = Lasso(alpha=0.01,max_iter=10000).fit(X_train_poly,y_train)
    X_test_poly = poly.fit_transform(X_test.reshape(4,1))
    
    return (linreg.score(X_test_poly,y_test),reglinreg.score(X_test_poly,y_test))

answer_four()

def answer_five():
    from sklearn.tree import DecisionTreeClassifier
    features = []
    dtc = DecisionTreeClassifier().fit(X_train2,y_train2)
    for feature, imp in zip(X_train2.columns,dtc.feature_importances_):
        features.append((imp, feature))
    features.sort(reverse=True)

    return [feature[1] for feature in features[:5]]

answer_five()

def answer_six():
    from sklearn.svm import SVC
    from sklearn.model_selection import validation_curve
    
    gamma = np.logspace(-4,1,6)
    
    train_score,test_score = validation_curve(SVC(random_state=0),X_subset,y_subset,param_name='gamma',param_range=gamma,scoring = 'accuracy')
    train_score.mean(axis=1)
    test_score.mean(axis=1)
    
    # Your code here

    return (train_score.mean(axis=1), test_score.mean(axis=1))

answer_six()

def answer_seven():
    
    import matplotlib.pyplot as plt
    %matplotlib inline
    
    train_scores, test_scores = answer_six()
    gamma = np.logspace(-4,1,6)
    plt.figure()
    plt.plot(gamma, train_scores, 'b--', gamma, test_scores, 'g-')
    plt.xlim(gamma)
    
    return (0.001, 10, 0.1)

answer_seven()